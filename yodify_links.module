<?php
/**
* Implementation of hook_rules_action_info().
*/
function yodify_links_rules_event_info(){
  return array(
    'yodify_count_file_download' => array(
      'group' => t('Yodify'),
      'label' => t('User attempting to download a file'),
      'arguments' => array(
        'file' => array(
          'type' => 'file',
          'label' => t('Downloaded file'),
        ),
      ),
      'module' => 'yodify_links',
    ),
  );
}

/**
 * Implementation of hook_rules_condition_info().
 * @ingroup rules
 */
function yodify_links_rules_condition_info() {
  return array(
    'yodify_count_file_download_check' => array(
      'group' => t('Yodify'),
      'label' => t('Check if the file can be downloaded'),
      'arguments' => array(
        'limit' => array(
          'type' => 'integer',
          'label' => t('User limit'),
        ),
      ),
      'module' => 'yodify_links',
    ),
  );
}

/**
 * Implementation of hook_rules_action_info().
 * @ingroup rules
 */
function yodify_links_rules_action_info() {
  return array(
    'yodify_count_file_download_redirect' => array(
      'group' => t('Yodify'),
      'label' => t('Redirect the user to the actual file'),
      'module' => 'yodify_links',
    ),
    //'yodify_count_file_download_reset' => array(
    //  'group' => t('Yodify'),
    //  'label' => t('Reset the user'),
    //  'module' => 'yodify_links',
    //),
  );
}


function yodify_count_file_download_check($limit, $variables, $state){
  global $user;
  //note: $user->data starts of == false
  $file_count = is_array($user->data)&&isset($user->data['file_count'])?$user->data['file_count']:0;
  return $file_count < $limit;
}

function yodify_count_file_download_redirect($value, $state){
  global $user;
  if (!is_array($user->data))
    $user->data = array('file_count'=>0);
  $user->data['file_count']++;//update the file download count...
  user_save($user);
  
  //redirect to the actual file.
  $file = $state->variables['file'];
  $url = $file->url->value();
  drupal_goto($url);
}

/**
 * Helper function that wraps devel module's dpm function
 * Using this function is safer because your code won't
 *  crash if devel isn't enabled.
 */
function d($one, $two = null){
  if (function_exists('dpm'))
    dpm($one, $two);
}

/**
 * Implements hook_menu().
 */
function yodify_links_menu() {
  $items['system/count'] = array(
    'page callback' => 'yodify_links_view',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback for 'system/count'
 */
function yodify_links_view(){
  if (isset($_GET['fid']) && isset($_GET['ts'])){
    $fid = intval($_GET['fid']);
    $stamp = intval($_GET['ts']);
    $file = file_load($fid);
    if ($file->timestamp == $stamp){
      global $user;
      rules_invoke_event('yodify_count_file_download', (object) $file);//Note: this should redirect the user.
    }
  }
  //drupal_not_found();
  return theme('file_access_limited');//If something goes wrong, just display the custom error message.
}

/**
 * Implements hook_field_formatter_info().
 */
function yodify_links_field_formatter_info() {
  return array(
    'yodify_links_count' => array(
      'label' => t('Yodify count clicks'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function yodify_links_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $element = array();
  //$entity_info = entity_get_info($entity_type);

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'yodify_count_file_field_formatter', //!$access ? 'file_link' : 'download_count_file_field_formatter',
      '#file' => (object) $item,
    );
  }
  return $element;
}


/**
 * Implements hook_theme().
 */
function yodify_links_theme() {
  $theme = array(
    'yodify_count_file_field_formatter' => array(
      'variables' => array('file' => NULL),
    ),
    'file_access_limited'=>array(
      'template'=>'file_access_limited',
    ),
  );
  return $theme;
}

/**
 * Theme function used to output the link to our custom menu callback
 * This redirects the hyperlink through our proxy instead of directly to the file.
 * See also: theme_file_link
 */
function theme_yodify_count_file_field_formatter($variables) {
  $file = $variables['file'];

  $url = 'system/count';
  $icon = theme('file_icon', array('file' => $file));

  $options = array('query'=>array('fid'=>$file->fid, 'ts'=>$file->timestamp));

  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  $output = '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';

  return $output;
}