<?php
define('CATEGORY_TID', 2);

/**
* Implementation of hook_rules_action_info().
*/
function yodify_links_rules_event_info(){
  return array(
    'yodify_count_file_download' => array(
      'group' => t('Yodify'),
      'label' => t('User attempting to download a file'),
      'arguments' => array(
        'file' => array(
          'type' => 'file',
          'label' => t('Downloaded file'),
        ),
      ),
      'module' => 'yodify_links',
    ),
  );
}

/**
 * Implementation of hook_rules_condition_info().
 * @ingroup rules
 */
function yodify_links_rules_condition_info() {
  return array(
    'yodify_count_file_download_check' => array(
      'group' => t('Yodify'),
      'label' => t('Check if the file can be downloaded'),
      'arguments' => array(
        'limit' => array(
          'type' => 'integer',
          'label' => t('User limit'),
        ),
      ),
      'module' => 'yodify_links',
    ),
  );
}

/**
 * Implementation of hook_rules_action_info().
 * @ingroup rules
 */
function yodify_links_rules_action_info() {
  return array(
    'yodify_count_file_download_redirect' => array(
      'group' => t('Yodify'),
      'label' => t('Redirect the user to the actual file'),
      'module' => 'yodify_links',
    ),
    //'yodify_count_file_download_reset' => array(
    //  'group' => t('Yodify'),
    //  'label' => t('Reset the user'),
    //  'module' => 'yodify_links',
    //),
  );
}

//Rules condition callback
function yodify_count_file_download_check($limit, $variables, $state){
  global $user;
  $tid = variable_get('yodify_links_category_tid', 0);//default value is zero
  $points = userpoints_get_current_points($user->uid, $tid);
  return $points < $limit;
}

//Rules action callback
function yodify_count_file_download_redirect($value, $state){
  global $user;
  $file = $state->variables['file'];
  $fid = $file->fid->value();
  
  //Generate a timestamp for 1 month from today.
  $expirydate = mktime(0, 0, 0, date("n")+1);
  $params = array(
      'uid' => $user->uid,
      'points' => 1,
      'tid' => variable_get('yodify_links_category_tid', 0),
      'expirydate' => $expirydate,
      'operation' => 'download',
      'display' => FALSE,
      'entity_type' => 'file',
      'entity_id' => $fid,
    );
  userpoints_userpointsapi($params);
  
  //redirect to the actual file.
  $url = $file->url->value();
  //d($url, 'redirecting to:');
  drupal_goto($url);
}

/**
 * Helper function that wraps devel module's dpm function
 * Using this function is safer because your code won't
 *  crash if devel isn't enabled.
 */
function d($one, $two = null){
  if (function_exists('dpm'))
    dpm($one, $two);
}

/**
 * Implements hook_menu().
 */
function yodify_links_menu() {
  $items['system/count'] = array(
    'page callback' => 'yodify_links_view',
    'access arguments' => array('access content'),
  );
  $items['admin/config/yodify_links'] = array(
    'title' => 'Yodify Links module settings',
    'description' => 'Modify Yodify Links settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yodify_links_admin_settings'),
    'access arguments' => array('administer userpoints'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

function yodify_links_admin_settings($form, &$form_state) {
  $form = array();
  
  $options = userpoints_get_categories();
  $taxa_url = url('admin/structure/taxonomy/' . taxonomy_vocabulary_load(variable_get(USERPOINTS_CATEGORY_DEFAULT_VID, ''))->machine_name);
  $form['yodify_links_category_tid'] = array(
    '#type' => 'select',
    '#title' => t('Download count category (via Userpoints module)'),
    '#default_value' => variable_get('yodify_links_category_tid', 0),
    '#options' => $options,
    '#description' => t('All download counts will be added to this category.  You can modify what categories are available by modifying the <a href="!url">Userpoints taxonomy</a>', array('!url' =>  $taxa_url)),
  );

  return system_settings_form($form);
}

/**
 * Page callback for 'system/count'
 */
function yodify_links_view(){
  if (isset($_GET['fid']) && isset($_GET['ts'])){
    $fid = intval($_GET['fid']);
    $stamp = intval($_GET['ts']);
    $file = file_load($fid);
    if ($file->timestamp == $stamp){
      rules_invoke_event('yodify_count_file_download', (object) $file);//Note: this should redirect the user.
    }
  }
  //drupal_not_found();
  return theme('file_access_limited');//If something goes wrong, just display the custom error message.
}

/**
 * Implements hook_field_formatter_info().
 */
function yodify_links_field_formatter_info() {
  return array(
    'yodify_links_count' => array(
      'label' => t('Yodify count clicks'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function yodify_links_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $element = array();
  //$entity_info = entity_get_info($entity_type);

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'yodify_count_file_field_formatter', //!$access ? 'file_link' : 'download_count_file_field_formatter',
      '#file' => (object) $item,
    );
  }
  return $element;
}


/**
 * Implements hook_theme().
 */
function yodify_links_theme() {
  $theme = array(
    'yodify_count_file_field_formatter' => array(
      'variables' => array('file' => NULL),
    ),
    'file_access_limited'=>array(
      'template'=>'file_access_limited',
    ),
  );
  return $theme;
}

/**
 * Theme function used to output the link to our custom menu callback
 * This redirects the hyperlink through our proxy instead of directly to the file.
 * See also: theme_file_link
 */
function theme_yodify_count_file_field_formatter($variables) {
  $file = $variables['file'];

  $url = 'system/count';
  $icon = theme('file_icon', array('file' => $file));

  $options = array('query'=>array('fid'=>$file->fid, 'ts'=>$file->timestamp));

  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  $output = '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';

  return $output;
}